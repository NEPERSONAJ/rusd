import React, { createContext, useContext, useState, useEffect } from 'react';
import { useSettings } from '../hooks/useSettings';
import { aiSettingsService } from '../lib/services/aiSettingsService';

interface Message {
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
}

interface ChatState {
  messages: Message[];
  isOpen: boolean;
  currentProduct: any | null;
}

interface AIChatContextType {
  isOpen: boolean;
  messages: Message[];
  openChat: () => void;
  closeChat: () => void;
  sendMessage: (content: string) => Promise<void>;
  openChatWithProduct: (product: any) => void;
}

const AIChatContext = createContext<AIChatContextType | undefined>(undefined);

const MAX_MESSAGES_PER_USER = 5;

const INITIAL_MESSAGE = {
  role: 'assistant',
  content: '',
  timestamp: Date.now()
};

export function AIChatProvider({ children }: { children: React.ReactNode }) {
  const { settings } = useSettings();
  const [state, setState] = useState<ChatState>({
    messages: [{
      ...INITIAL_MESSAGE,
      content: `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ${settings.site_title}.\n\nüí´ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n‚Ä¢ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã\n‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö\n‚Ä¢ –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ\n‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n–ï—Å–ª–∏ —è –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:\nüì± WhatsApp: +7988 635 99 99 \n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä`
    }],
    isOpen: false,
    currentProduct: null,
  });
  const [aiSettings, setAiSettings] = useState<any | null>(null);

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      const data = await aiSettingsService.getSettings();
      console.log('AI settings data:', data); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

      if (data) {
        setAiSettings(data);
      } else {
        console.error('AI settings not found or empty.');
      }
    } catch (error) {
      console.error('Error loading AI settings:', error);
    }
  };

  const openChat = () => {
    setState(prev => ({ ...prev, isOpen: true }));
  };

  const closeChat = () => {
    setState(prev => ({ ...prev, isOpen: false }));
  };

  const openChatWithProduct = (product: any) => {
    setState(prev => ({
      ...prev,
      isOpen: true,
      currentProduct: product,
      messages: [
        {
          role: 'assistant',
          content: `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ "${product.name}". \n\nüí´ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n\n‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏\n\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! üòä`,
          timestamp: Date.now()
        }
      ]
    }));
  };

  const sendMessage = async (content: string) => {
    if (!aiSettings) {
      console.error('AI settings not loaded');
      return;
    }

    const userMessage: Message = {
      role: 'user',
      content,
      timestamp: Date.now()
    };

    setState(prev => ({
      ...prev,
      messages: [...prev.messages, userMessage].slice(-MAX_MESSAGES_PER_USER * 2)
    }));

    try {
      const productContext = state.currentProduct ? 
        `–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ç–æ–≤–∞—Ä—É:\n${state.currentProduct.name}\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚Ä¢ –¶–µ–Ω–∞: ${state.currentProduct.price.toLocaleString('ru-RU')} ‚ÇΩ\n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${state.currentProduct.description}\n‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n${state.currentProduct.specs?.map(spec => `  - ${spec}`).join('\n')}\n\n–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ —Ü–µ–Ω–µ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö - –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ú–æ–∂–µ—à—å –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é, —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ —É—Ö–æ–¥—É –∑–∞ —Ç–æ–≤–∞—Ä–æ–º.\n\n` : '';

      const response = await fetch(aiSettings.api_url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${aiSettings.api_key}`
        },
        body: JSON.stringify({
          model: aiSettings.model,
          temperature: aiSettings.temperature,
          max_tokens: aiSettings.max_tokens,
          messages: [
            {
              role: 'system',
              content: `–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –†—É—Å–î–µ–∫–æ—Ä. ${productContext}–û—Ç–≤–µ—á–∞–π —Å —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: +7988 635 99 99. –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏ –∑–Ω–∞–µ—à—å –≤—Å—ë –æ –º–æ–ª–¥–∏–Ω–≥–∞—Ö, –æ–±–æ—è—Ö, –ø–ª–∏–Ω—Ç—É—Å–∞—Ö –∏ –∫–∞—Ä–Ω–∏–∑–∞—Ö. –î–∞–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–±–æ—Ä—É, —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ —É—Ö–æ–¥—É –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏. –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–∞–π —á—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏, —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ WhatsApp.`
            },
            ...state.messages.slice(-MAX_MESSAGES_PER_USER * 2).map(msg => ({
              role: msg.role,
              content: msg.content
            })),
            { role: 'user', content }
          ]
        })
      });

      if (!response.ok) {
        throw new Error(`Request failed with status ${response.status}`);
      }

      const data = await response.json();
      const assistantMessage: Message = {
        role: 'assistant',
        content: data.choices[0]?.message.content || 'üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: Date.now()
      };

      setState(prev => ({
        ...prev,
        messages: [...prev.messages, assistantMessage].slice(-MAX_MESSAGES_PER_USER * 2)
      }));
    } catch (error) {
      console.error('Error:', error);
      const errorMessage: Message = {
        role: 'assistant',
        content: 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        timestamp: Date.now()
      };

      setState(prev => ({
        ...prev,
        messages: [...prev.messages, errorMessage].slice(-MAX_MESSAGES_PER_USER * 2)
      }));
    }
  };

  return (
    <AIChatContext.Provider value={{
      isOpen: state.isOpen,
      messages: state.messages,
      openChat,
      closeChat,
      sendMessage,
      openChatWithProduct
    }}>
      {children}
    </AIChatContext.Provider>
  );
}

export function useAIChat() {
  const context = useContext(AIChatContext);
  if (context === undefined) {
    throw new Error('useAIChat must be used within an AIChatProvider');
  }
  return context;
}
